// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PublisherClient is the client API for Publisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublisherClient interface {
	// Publish publishes one or more CloudEvents provided by the client and streams back the outcome of
	// each publish request as they are processed.
	Publish(ctx context.Context, opts ...grpc.CallOption) (Publisher_PublishClient, error)
}

type publisherClient struct {
	cc grpc.ClientConnInterface
}

func NewPublisherClient(cc grpc.ClientConnInterface) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Publisher_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Publisher_serviceDesc.Streams[0], "/pubsub.v0.Publisher/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &publisherPublishClient{stream}
	return x, nil
}

type Publisher_PublishClient interface {
	Send(*PublishInput) error
	Recv() (*PublishResponse, error)
	grpc.ClientStream
}

type publisherPublishClient struct {
	grpc.ClientStream
}

func (x *publisherPublishClient) Send(m *PublishInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publisherPublishClient) Recv() (*PublishResponse, error) {
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PublisherServer is the server API for Publisher service.
// All implementations must embed UnimplementedPublisherServer
// for forward compatibility
type PublisherServer interface {
	// Publish publishes one or more CloudEvents provided by the client and streams back the outcome of
	// each publish request as they are processed.
	Publish(Publisher_PublishServer) error
	mustEmbedUnimplementedPublisherServer()
}

// UnimplementedPublisherServer must be embedded to have forward compatible implementations.
type UnimplementedPublisherServer struct {
}

func (UnimplementedPublisherServer) Publish(Publisher_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedPublisherServer) mustEmbedUnimplementedPublisherServer() {}

// UnsafePublisherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublisherServer will
// result in compilation errors.
type UnsafePublisherServer interface {
	mustEmbedUnimplementedPublisherServer()
}

func RegisterPublisherServer(s *grpc.Server, srv PublisherServer) {
	s.RegisterService(&_Publisher_serviceDesc, srv)
}

func _Publisher_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublisherServer).Publish(&publisherPublishServer{stream})
}

type Publisher_PublishServer interface {
	Send(*PublishResponse) error
	Recv() (*PublishInput, error)
	grpc.ServerStream
}

type publisherPublishServer struct {
	grpc.ServerStream
}

func (x *publisherPublishServer) Send(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publisherPublishServer) Recv() (*PublishInput, error) {
	m := new(PublishInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Publisher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pubsub.v0.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _Publisher_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pubsub/v0/pubsub.proto",
}

// SubscriberClient is the client API for Subscriber service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriberClient interface {
	// Subscribe creates a consumer subscription and streams back the CloudEvents for that subscription
	// as they are published.
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Subscriber_SubscribeClient, error)
}

type subscriberClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberClient(cc grpc.ClientConnInterface) SubscriberClient {
	return &subscriberClient{cc}
}

func (c *subscriberClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Subscriber_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Subscriber_serviceDesc.Streams[0], "/pubsub.v0.Subscriber/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriberSubscribeClient{stream}
	return x, nil
}

type Subscriber_SubscribeClient interface {
	Send(*SubscribeInput) error
	Recv() (*CloudEvent, error)
	grpc.ClientStream
}

type subscriberSubscribeClient struct {
	grpc.ClientStream
}

func (x *subscriberSubscribeClient) Send(m *SubscribeInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *subscriberSubscribeClient) Recv() (*CloudEvent, error) {
	m := new(CloudEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubscriberServer is the server API for Subscriber service.
// All implementations must embed UnimplementedSubscriberServer
// for forward compatibility
type SubscriberServer interface {
	// Subscribe creates a consumer subscription and streams back the CloudEvents for that subscription
	// as they are published.
	Subscribe(Subscriber_SubscribeServer) error
	mustEmbedUnimplementedSubscriberServer()
}

// UnimplementedSubscriberServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriberServer struct {
}

func (UnimplementedSubscriberServer) Subscribe(Subscriber_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSubscriberServer) mustEmbedUnimplementedSubscriberServer() {}

// UnsafeSubscriberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriberServer will
// result in compilation errors.
type UnsafeSubscriberServer interface {
	mustEmbedUnimplementedSubscriberServer()
}

func RegisterSubscriberServer(s *grpc.Server, srv SubscriberServer) {
	s.RegisterService(&_Subscriber_serviceDesc, srv)
}

func _Subscriber_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SubscriberServer).Subscribe(&subscriberSubscribeServer{stream})
}

type Subscriber_SubscribeServer interface {
	Send(*CloudEvent) error
	Recv() (*SubscribeInput, error)
	grpc.ServerStream
}

type subscriberSubscribeServer struct {
	grpc.ServerStream
}

func (x *subscriberSubscribeServer) Send(m *CloudEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *subscriberSubscribeServer) Recv() (*SubscribeInput, error) {
	m := new(SubscribeInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Subscriber_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pubsub.v0.Subscriber",
	HandlerType: (*SubscriberServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Subscriber_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pubsub/v0/pubsub.proto",
}
