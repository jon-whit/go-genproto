// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: pubsubv1.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// AckStrategy defines the type of acknowledgement strategies for a Subscription.
type AckStrategy int32

const (
	// AUTO automatically acknowledges a message when it has been delivered.
	AckStrategy_AUTO AckStrategy = 0
	// EXPLICIT requires a message to be manually acknowledged once a message has been delivered.
	AckStrategy_EXPLICIT AckStrategy = 1
)

// Enum value maps for AckStrategy.
var (
	AckStrategy_name = map[int32]string{
		0: "AUTO",
		1: "EXPLICIT",
	}
	AckStrategy_value = map[string]int32{
		"AUTO":     0,
		"EXPLICIT": 1,
	}
)

func (x AckStrategy) Enum() *AckStrategy {
	p := new(AckStrategy)
	*p = x
	return p
}

func (x AckStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AckStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_pubsubv1_proto_enumTypes[0].Descriptor()
}

func (AckStrategy) Type() protoreflect.EnumType {
	return &file_pubsubv1_proto_enumTypes[0]
}

func (x AckStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AckStrategy.Descriptor instead.
func (AckStrategy) EnumDescriptor() ([]byte, []int) {
	return file_pubsubv1_proto_rawDescGZIP(), []int{0}
}

type PublishCloudEventError_ErrorCode int32

const (
	PublishCloudEventError_UNAUTHENTICATED   PublishCloudEventError_ErrorCode = 0
	PublishCloudEventError_INVALID_INPUT     PublishCloudEventError_ErrorCode = 1
	PublishCloudEventError_PAYLOAD_TOO_LARGE PublishCloudEventError_ErrorCode = 2
)

// Enum value maps for PublishCloudEventError_ErrorCode.
var (
	PublishCloudEventError_ErrorCode_name = map[int32]string{
		0: "UNAUTHENTICATED",
		1: "INVALID_INPUT",
		2: "PAYLOAD_TOO_LARGE",
	}
	PublishCloudEventError_ErrorCode_value = map[string]int32{
		"UNAUTHENTICATED":   0,
		"INVALID_INPUT":     1,
		"PAYLOAD_TOO_LARGE": 2,
	}
)

func (x PublishCloudEventError_ErrorCode) Enum() *PublishCloudEventError_ErrorCode {
	p := new(PublishCloudEventError_ErrorCode)
	*p = x
	return p
}

func (x PublishCloudEventError_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublishCloudEventError_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pubsubv1_proto_enumTypes[1].Descriptor()
}

func (PublishCloudEventError_ErrorCode) Type() protoreflect.EnumType {
	return &file_pubsubv1_proto_enumTypes[1]
}

func (x PublishCloudEventError_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublishCloudEventError_ErrorCode.Descriptor instead.
func (PublishCloudEventError_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_pubsubv1_proto_rawDescGZIP(), []int{6, 0}
}

// Topic represents a message topic to publish or subscribe to.
type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId  string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Domain      string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Aggregate   string `protobuf:"bytes,4,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
	AggregateId string `protobuf:"bytes,5,opt,name=aggregate_id,json=aggregateId,proto3" json:"aggregate_id,omitempty"`
	EventType   string `protobuf:"bytes,6,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pubsubv1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_pubsubv1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_pubsubv1_proto_rawDescGZIP(), []int{0}
}

func (x *Topic) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *Topic) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Topic) GetAggregate() string {
	if x != nil {
		return x.Aggregate
	}
	return ""
}

func (x *Topic) GetAggregateId() string {
	if x != nil {
		return x.AggregateId
	}
	return ""
}

func (x *Topic) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

// CloudEvent defines a common event type as defined by the CloudEvent specification.
// For more information on the CloudEvent spec, see https://cloudevents.io */
type CloudEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Source          string               `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Specversion     string               `protobuf:"bytes,6,opt,name=specversion,proto3" json:"specversion,omitempty"`
	Type            string               `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	Subject         string               `protobuf:"bytes,8,opt,name=subject,proto3" json:"subject,omitempty"`
	Datacontenttype string               `protobuf:"bytes,9,opt,name=datacontenttype,proto3" json:"datacontenttype,omitempty"`
	Dataschema      string               `protobuf:"bytes,10,opt,name=dataschema,proto3" json:"dataschema,omitempty"`
	Time            *timestamp.Timestamp `protobuf:"bytes,11,opt,name=time,proto3" json:"time,omitempty"`
	Data            *_struct.Struct      `protobuf:"bytes,12,opt,name=data,proto3" json:"data,omitempty"`
	Traceparent     string               `protobuf:"bytes,13,opt,name=traceparent,proto3" json:"traceparent,omitempty"`
	Tracestate      string               `protobuf:"bytes,14,opt,name=tracestate,proto3" json:"tracestate,omitempty"`
	AckToken        string               `protobuf:"bytes,15,opt,name=ack_token,json=ackToken,proto3" json:"ack_token,omitempty"`
}

func (x *CloudEvent) Reset() {
	*x = CloudEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pubsubv1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudEvent) ProtoMessage() {}

func (x *CloudEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pubsubv1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudEvent.ProtoReflect.Descriptor instead.
func (*CloudEvent) Descriptor() ([]byte, []int) {
	return file_pubsubv1_proto_rawDescGZIP(), []int{1}
}

func (x *CloudEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudEvent) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CloudEvent) GetSpecversion() string {
	if x != nil {
		return x.Specversion
	}
	return ""
}

func (x *CloudEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CloudEvent) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CloudEvent) GetDatacontenttype() string {
	if x != nil {
		return x.Datacontenttype
	}
	return ""
}

func (x *CloudEvent) GetDataschema() string {
	if x != nil {
		return x.Dataschema
	}
	return ""
}

func (x *CloudEvent) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CloudEvent) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CloudEvent) GetTraceparent() string {
	if x != nil {
		return x.Traceparent
	}
	return ""
}

func (x *CloudEvent) GetTracestate() string {
	if x != nil {
		return x.Tracestate
	}
	return ""
}

func (x *CloudEvent) GetAckToken() string {
	if x != nil {
		return x.AckToken
	}
	return ""
}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Done bool `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pubsubv1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_pubsubv1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_pubsubv1_proto_rawDescGZIP(), []int{2}
}

func (x *Context) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

type PublishCloudEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientMutationId string               `protobuf:"bytes,1,opt,name=client_mutation_id,json=clientMutationId,proto3" json:"client_mutation_id,omitempty"`
	Id               string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Source           string               `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Topic            *Topic               `protobuf:"bytes,9,opt,name=topic,proto3" json:"topic,omitempty"`
	Datacontenttype  string               `protobuf:"bytes,10,opt,name=datacontenttype,proto3" json:"datacontenttype,omitempty"`
	Dataschema       string               `protobuf:"bytes,11,opt,name=dataschema,proto3" json:"dataschema,omitempty"`
	Time             *timestamp.Timestamp `protobuf:"bytes,12,opt,name=time,proto3" json:"time,omitempty"`
	Data             *_struct.Struct      `protobuf:"bytes,13,opt,name=data,proto3" json:"data,omitempty"`
	Traceparent      string               `protobuf:"bytes,14,opt,name=traceparent,proto3" json:"traceparent,omitempty"`
	Tracestate       string               `protobuf:"bytes,15,opt,name=tracestate,proto3" json:"tracestate,omitempty"`
}

func (x *PublishCloudEventRequest) Reset() {
	*x = PublishCloudEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pubsubv1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishCloudEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishCloudEventRequest) ProtoMessage() {}

func (x *PublishCloudEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pubsubv1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishCloudEventRequest.ProtoReflect.Descriptor instead.
func (*PublishCloudEventRequest) Descriptor() ([]byte, []int) {
	return file_pubsubv1_proto_rawDescGZIP(), []int{3}
}

func (x *PublishCloudEventRequest) GetClientMutationId() string {
	if x != nil {
		return x.ClientMutationId
	}
	return ""
}

func (x *PublishCloudEventRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PublishCloudEventRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PublishCloudEventRequest) GetTopic() *Topic {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *PublishCloudEventRequest) GetDatacontenttype() string {
	if x != nil {
		return x.Datacontenttype
	}
	return ""
}

func (x *PublishCloudEventRequest) GetDataschema() string {
	if x != nil {
		return x.Dataschema
	}
	return ""
}

func (x *PublishCloudEventRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *PublishCloudEventRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PublishCloudEventRequest) GetTraceparent() string {
	if x != nil {
		return x.Traceparent
	}
	return ""
}

func (x *PublishCloudEventRequest) GetTracestate() string {
	if x != nil {
		return x.Tracestate
	}
	return ""
}

type PublishCloudEventInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to InputPayload:
	//	*PublishCloudEventInput_PublishRequest
	//	*PublishCloudEventInput_Context
	InputPayload isPublishCloudEventInput_InputPayload `protobuf_oneof:"input_payload"`
}

func (x *PublishCloudEventInput) Reset() {
	*x = PublishCloudEventInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pubsubv1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishCloudEventInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishCloudEventInput) ProtoMessage() {}

func (x *PublishCloudEventInput) ProtoReflect() protoreflect.Message {
	mi := &file_pubsubv1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishCloudEventInput.ProtoReflect.Descriptor instead.
func (*PublishCloudEventInput) Descriptor() ([]byte, []int) {
	return file_pubsubv1_proto_rawDescGZIP(), []int{4}
}

func (m *PublishCloudEventInput) GetInputPayload() isPublishCloudEventInput_InputPayload {
	if m != nil {
		return m.InputPayload
	}
	return nil
}

func (x *PublishCloudEventInput) GetPublishRequest() *PublishCloudEventRequest {
	if x, ok := x.GetInputPayload().(*PublishCloudEventInput_PublishRequest); ok {
		return x.PublishRequest
	}
	return nil
}

func (x *PublishCloudEventInput) GetContext() *Context {
	if x, ok := x.GetInputPayload().(*PublishCloudEventInput_Context); ok {
		return x.Context
	}
	return nil
}

type isPublishCloudEventInput_InputPayload interface {
	isPublishCloudEventInput_InputPayload()
}

type PublishCloudEventInput_PublishRequest struct {
	PublishRequest *PublishCloudEventRequest `protobuf:"bytes,1,opt,name=publish_request,json=publishRequest,proto3,oneof"`
}

type PublishCloudEventInput_Context struct {
	Context *Context `protobuf:"bytes,2,opt,name=context,proto3,oneof"`
}

func (*PublishCloudEventInput_PublishRequest) isPublishCloudEventInput_InputPayload() {}

func (*PublishCloudEventInput_Context) isPublishCloudEventInput_InputPayload() {}

type PublishCloudEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientMutationId string `protobuf:"bytes,1,opt,name=client_mutation_id,json=clientMutationId,proto3" json:"client_mutation_id,omitempty"`
	// Types that are assignable to Payload:
	//	*PublishCloudEventResponse_Event
	//	*PublishCloudEventResponse_Error
	Payload isPublishCloudEventResponse_Payload `protobuf_oneof:"payload"`
}

func (x *PublishCloudEventResponse) Reset() {
	*x = PublishCloudEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pubsubv1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishCloudEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishCloudEventResponse) ProtoMessage() {}

func (x *PublishCloudEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pubsubv1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishCloudEventResponse.ProtoReflect.Descriptor instead.
func (*PublishCloudEventResponse) Descriptor() ([]byte, []int) {
	return file_pubsubv1_proto_rawDescGZIP(), []int{5}
}

func (x *PublishCloudEventResponse) GetClientMutationId() string {
	if x != nil {
		return x.ClientMutationId
	}
	return ""
}

func (m *PublishCloudEventResponse) GetPayload() isPublishCloudEventResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *PublishCloudEventResponse) GetEvent() *CloudEvent {
	if x, ok := x.GetPayload().(*PublishCloudEventResponse_Event); ok {
		return x.Event
	}
	return nil
}

func (x *PublishCloudEventResponse) GetError() *PublishCloudEventError {
	if x, ok := x.GetPayload().(*PublishCloudEventResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isPublishCloudEventResponse_Payload interface {
	isPublishCloudEventResponse_Payload()
}

type PublishCloudEventResponse_Event struct {
	Event *CloudEvent `protobuf:"bytes,2,opt,name=event,proto3,oneof"`
}

type PublishCloudEventResponse_Error struct {
	Error *PublishCloudEventError `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*PublishCloudEventResponse_Event) isPublishCloudEventResponse_Payload() {}

func (*PublishCloudEventResponse_Error) isPublishCloudEventResponse_Payload() {}

type PublishCloudEventError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                           `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code    PublishCloudEventError_ErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=pubsub.PublishCloudEventError_ErrorCode" json:"code,omitempty"`
}

func (x *PublishCloudEventError) Reset() {
	*x = PublishCloudEventError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pubsubv1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishCloudEventError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishCloudEventError) ProtoMessage() {}

func (x *PublishCloudEventError) ProtoReflect() protoreflect.Message {
	mi := &file_pubsubv1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishCloudEventError.ProtoReflect.Descriptor instead.
func (*PublishCloudEventError) Descriptor() ([]byte, []int) {
	return file_pubsubv1_proto_rawDescGZIP(), []int{6}
}

func (x *PublishCloudEventError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PublishCloudEventError) GetCode() PublishCloudEventError_ErrorCode {
	if x != nil {
		return x.Code
	}
	return PublishCloudEventError_UNAUTHENTICATED
}

// SubscriptionOptions provide additional options to configure a consumer Subscription.
type SubscriptionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// group specifies a consumer group that this subscriber should join.
	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	// ackStrategy defines the acknowledgement strategy for the Subscription.
	AckStrategy AckStrategy `protobuf:"varint,2,opt,name=ack_strategy,json=ackStrategy,proto3,enum=pubsub.AckStrategy" json:"ack_strategy,omitempty"`
	// ackDeadline specifies the amount of time to wait before attempting to redeliver an undelivered message.
	AckDeadline int64 `protobuf:"varint,3,opt,name=ack_deadline,json=ackDeadline,proto3" json:"ack_deadline,omitempty"`
}

func (x *SubscriptionOptions) Reset() {
	*x = SubscriptionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pubsubv1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionOptions) ProtoMessage() {}

func (x *SubscriptionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pubsubv1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionOptions.ProtoReflect.Descriptor instead.
func (*SubscriptionOptions) Descriptor() ([]byte, []int) {
	return file_pubsubv1_proto_rawDescGZIP(), []int{7}
}

func (x *SubscriptionOptions) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *SubscriptionOptions) GetAckStrategy() AckStrategy {
	if x != nil {
		return x.AckStrategy
	}
	return AckStrategy_AUTO
}

func (x *SubscriptionOptions) GetAckDeadline() int64 {
	if x != nil {
		return x.AckDeadline
	}
	return 0
}

type CloudEventSubscriptionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSubscriptionId string               `protobuf:"bytes,1,opt,name=client_subscription_id,json=clientSubscriptionId,proto3" json:"client_subscription_id,omitempty"`
	Topics               []*Topic             `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Options              *SubscriptionOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *CloudEventSubscriptionInput) Reset() {
	*x = CloudEventSubscriptionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pubsubv1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudEventSubscriptionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudEventSubscriptionInput) ProtoMessage() {}

func (x *CloudEventSubscriptionInput) ProtoReflect() protoreflect.Message {
	mi := &file_pubsubv1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudEventSubscriptionInput.ProtoReflect.Descriptor instead.
func (*CloudEventSubscriptionInput) Descriptor() ([]byte, []int) {
	return file_pubsubv1_proto_rawDescGZIP(), []int{8}
}

func (x *CloudEventSubscriptionInput) GetClientSubscriptionId() string {
	if x != nil {
		return x.ClientSubscriptionId
	}
	return ""
}

func (x *CloudEventSubscriptionInput) GetTopics() []*Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *CloudEventSubscriptionInput) GetOptions() *SubscriptionOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

var File_pubsubv1_proto protoreflect.FileDescriptor

var file_pubsubv1_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x03, 0x0a, 0x0a, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63,
	0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x1d, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0xfe, 0x02, 0x0a, 0x18, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x28,
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xb8, 0x01,
	0x0a, 0x19, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x02, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x0b, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0xb1, 0x01, 0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x35, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x25, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x01, 0x32, 0xa4, 0x01, 0x0a, 0x06,
	0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x48, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x50, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x1e, 0x2e, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x10, 0x5a, 0x0e, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pubsubv1_proto_rawDescOnce sync.Once
	file_pubsubv1_proto_rawDescData = file_pubsubv1_proto_rawDesc
)

func file_pubsubv1_proto_rawDescGZIP() []byte {
	file_pubsubv1_proto_rawDescOnce.Do(func() {
		file_pubsubv1_proto_rawDescData = protoimpl.X.CompressGZIP(file_pubsubv1_proto_rawDescData)
	})
	return file_pubsubv1_proto_rawDescData
}

var file_pubsubv1_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pubsubv1_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pubsubv1_proto_goTypes = []interface{}{
	(AckStrategy)(0),                      // 0: pubsub.AckStrategy
	(PublishCloudEventError_ErrorCode)(0), // 1: pubsub.PublishCloudEventError.ErrorCode
	(*Topic)(nil),                         // 2: pubsub.Topic
	(*CloudEvent)(nil),                    // 3: pubsub.CloudEvent
	(*Context)(nil),                       // 4: pubsub.Context
	(*PublishCloudEventRequest)(nil),      // 5: pubsub.PublishCloudEventRequest
	(*PublishCloudEventInput)(nil),        // 6: pubsub.PublishCloudEventInput
	(*PublishCloudEventResponse)(nil),     // 7: pubsub.PublishCloudEventResponse
	(*PublishCloudEventError)(nil),        // 8: pubsub.PublishCloudEventError
	(*SubscriptionOptions)(nil),           // 9: pubsub.SubscriptionOptions
	(*CloudEventSubscriptionInput)(nil),   // 10: pubsub.CloudEventSubscriptionInput
	(*timestamp.Timestamp)(nil),           // 11: google.protobuf.Timestamp
	(*_struct.Struct)(nil),                // 12: google.protobuf.Struct
}
var file_pubsubv1_proto_depIdxs = []int32{
	11, // 0: pubsub.CloudEvent.time:type_name -> google.protobuf.Timestamp
	12, // 1: pubsub.CloudEvent.data:type_name -> google.protobuf.Struct
	2,  // 2: pubsub.PublishCloudEventRequest.topic:type_name -> pubsub.Topic
	11, // 3: pubsub.PublishCloudEventRequest.time:type_name -> google.protobuf.Timestamp
	12, // 4: pubsub.PublishCloudEventRequest.data:type_name -> google.protobuf.Struct
	5,  // 5: pubsub.PublishCloudEventInput.publish_request:type_name -> pubsub.PublishCloudEventRequest
	4,  // 6: pubsub.PublishCloudEventInput.context:type_name -> pubsub.Context
	3,  // 7: pubsub.PublishCloudEventResponse.event:type_name -> pubsub.CloudEvent
	8,  // 8: pubsub.PublishCloudEventResponse.error:type_name -> pubsub.PublishCloudEventError
	1,  // 9: pubsub.PublishCloudEventError.code:type_name -> pubsub.PublishCloudEventError.ErrorCode
	0,  // 10: pubsub.SubscriptionOptions.ack_strategy:type_name -> pubsub.AckStrategy
	2,  // 11: pubsub.CloudEventSubscriptionInput.topics:type_name -> pubsub.Topic
	9,  // 12: pubsub.CloudEventSubscriptionInput.options:type_name -> pubsub.SubscriptionOptions
	10, // 13: pubsub.Pubsub.Subscribe:input_type -> pubsub.CloudEventSubscriptionInput
	6,  // 14: pubsub.Pubsub.Publish:input_type -> pubsub.PublishCloudEventInput
	3,  // 15: pubsub.Pubsub.Subscribe:output_type -> pubsub.CloudEvent
	7,  // 16: pubsub.Pubsub.Publish:output_type -> pubsub.PublishCloudEventResponse
	15, // [15:17] is the sub-list for method output_type
	13, // [13:15] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_pubsubv1_proto_init() }
func file_pubsubv1_proto_init() {
	if File_pubsubv1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pubsubv1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pubsubv1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pubsubv1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pubsubv1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishCloudEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pubsubv1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishCloudEventInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pubsubv1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishCloudEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pubsubv1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishCloudEventError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pubsubv1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pubsubv1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudEventSubscriptionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pubsubv1_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PublishCloudEventInput_PublishRequest)(nil),
		(*PublishCloudEventInput_Context)(nil),
	}
	file_pubsubv1_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*PublishCloudEventResponse_Event)(nil),
		(*PublishCloudEventResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pubsubv1_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pubsubv1_proto_goTypes,
		DependencyIndexes: file_pubsubv1_proto_depIdxs,
		EnumInfos:         file_pubsubv1_proto_enumTypes,
		MessageInfos:      file_pubsubv1_proto_msgTypes,
	}.Build()
	File_pubsubv1_proto = out.File
	file_pubsubv1_proto_rawDesc = nil
	file_pubsubv1_proto_goTypes = nil
	file_pubsubv1_proto_depIdxs = nil
}
