// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PubsubClient is the client API for Pubsub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PubsubClient interface {
	// Subscribe creates a consumer subscription and streams back the CloudEvents for that subscription
	// as they are published.
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Pubsub_SubscribeClient, error)
	// Publish publishes one or more CloudEvents provided by the client and streams back the outcome of
	// each publish request as they are processed.
	Publish(ctx context.Context, opts ...grpc.CallOption) (Pubsub_PublishClient, error)
}

type pubsubClient struct {
	cc grpc.ClientConnInterface
}

func NewPubsubClient(cc grpc.ClientConnInterface) PubsubClient {
	return &pubsubClient{cc}
}

var pubsubSubscribeStreamDesc = &grpc.StreamDesc{
	StreamName:    "Subscribe",
	ServerStreams: true,
	ClientStreams: true,
}

func (c *pubsubClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Pubsub_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, pubsubSubscribeStreamDesc, "/pubsub.Pubsub/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubsubSubscribeClient{stream}
	return x, nil
}

type Pubsub_SubscribeClient interface {
	Send(*CloudEventSubscriptionInput) error
	Recv() (*CloudEvent, error)
	grpc.ClientStream
}

type pubsubSubscribeClient struct {
	grpc.ClientStream
}

func (x *pubsubSubscribeClient) Send(m *CloudEventSubscriptionInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pubsubSubscribeClient) Recv() (*CloudEvent, error) {
	m := new(CloudEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var pubsubPublishStreamDesc = &grpc.StreamDesc{
	StreamName:    "Publish",
	ServerStreams: true,
	ClientStreams: true,
}

func (c *pubsubClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Pubsub_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, pubsubPublishStreamDesc, "/pubsub.Pubsub/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubsubPublishClient{stream}
	return x, nil
}

type Pubsub_PublishClient interface {
	Send(*PublishCloudEventInput) error
	Recv() (*PublishCloudEventResponse, error)
	grpc.ClientStream
}

type pubsubPublishClient struct {
	grpc.ClientStream
}

func (x *pubsubPublishClient) Send(m *PublishCloudEventInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pubsubPublishClient) Recv() (*PublishCloudEventResponse, error) {
	m := new(PublishCloudEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubsubService is the service API for Pubsub service.
// Fields should be assigned to their respective handler implementations only before
// RegisterPubsubService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type PubsubService struct {
	// Subscribe creates a consumer subscription and streams back the CloudEvents for that subscription
	// as they are published.
	Subscribe func(Pubsub_SubscribeServer) error
	// Publish publishes one or more CloudEvents provided by the client and streams back the outcome of
	// each publish request as they are processed.
	Publish func(Pubsub_PublishServer) error
}

func (s *PubsubService) subscribe(_ interface{}, stream grpc.ServerStream) error {
	return s.Subscribe(&pubsubSubscribeServer{stream})
}
func (s *PubsubService) publish(_ interface{}, stream grpc.ServerStream) error {
	return s.Publish(&pubsubPublishServer{stream})
}

type Pubsub_SubscribeServer interface {
	Send(*CloudEvent) error
	Recv() (*CloudEventSubscriptionInput, error)
	grpc.ServerStream
}

type pubsubSubscribeServer struct {
	grpc.ServerStream
}

func (x *pubsubSubscribeServer) Send(m *CloudEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pubsubSubscribeServer) Recv() (*CloudEventSubscriptionInput, error) {
	m := new(CloudEventSubscriptionInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type Pubsub_PublishServer interface {
	Send(*PublishCloudEventResponse) error
	Recv() (*PublishCloudEventInput, error)
	grpc.ServerStream
}

type pubsubPublishServer struct {
	grpc.ServerStream
}

func (x *pubsubPublishServer) Send(m *PublishCloudEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pubsubPublishServer) Recv() (*PublishCloudEventInput, error) {
	m := new(PublishCloudEventInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegisterPubsubService registers a service implementation with a gRPC server.
func RegisterPubsubService(s grpc.ServiceRegistrar, srv *PubsubService) {
	srvCopy := *srv
	if srvCopy.Subscribe == nil {
		srvCopy.Subscribe = func(Pubsub_SubscribeServer) error {
			return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
		}
	}
	if srvCopy.Publish == nil {
		srvCopy.Publish = func(Pubsub_PublishServer) error {
			return status.Errorf(codes.Unimplemented, "method Publish not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "pubsub.Pubsub",
		Methods:     []grpc.MethodDesc{},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "Subscribe",
				Handler:       srvCopy.subscribe,
				ServerStreams: true,
				ClientStreams: true,
			},
			{
				StreamName:    "Publish",
				Handler:       srvCopy.publish,
				ServerStreams: true,
				ClientStreams: true,
			},
		},
		Metadata: "pubsubv1.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewPubsubService creates a new PubsubService containing the
// implemented methods of the Pubsub service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewPubsubService(s interface{}) *PubsubService {
	ns := &PubsubService{}
	if h, ok := s.(interface {
		Subscribe(Pubsub_SubscribeServer) error
	}); ok {
		ns.Subscribe = h.Subscribe
	}
	if h, ok := s.(interface {
		Publish(Pubsub_PublishServer) error
	}); ok {
		ns.Publish = h.Publish
	}
	return ns
}

// UnstablePubsubService is the service API for Pubsub service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstablePubsubService interface {
	// Subscribe creates a consumer subscription and streams back the CloudEvents for that subscription
	// as they are published.
	Subscribe(Pubsub_SubscribeServer) error
	// Publish publishes one or more CloudEvents provided by the client and streams back the outcome of
	// each publish request as they are processed.
	Publish(Pubsub_PublishServer) error
}
